syntax = "proto2";
package fantasybit;
import "StaticData.proto";
import "StatusData.proto";
import "ExData.proto";


message Secret3
{
    optional string private_key = 1;
    optional string mnemonic_key = 3;
    optional string fantasy_name = 20;
    optional string public_key = 30;
}

message NameProof
{
    enum Type { POW=1; TWEET=2; ORACLE=3; MASTER=4; }
    optional Type type = 1;
    extensions 200 to max;
}

message TweetProof
{
    extend NameProof {
        optional TweetProof tweet_proof = 201;
    }

    optional string tweet = 10;
}

message MasterProof {
    extend NameProof {
            optional MasterProof  master_proof = 401;
    }

    optional string season = 10;
    optional int32 week = 20;
    optional int32 timestamp = 21;
    optional SignedTransaction new_oracle_name =66;
}

enum TransType {
    NAME = 0;
    PROJECTION = 1;
    RESULT = 2;
    DATA = 3;
    PROJECTION_BLOCK = 4;
    MASTER_NAME = 5;
    TIME = 6;
    STAMPED = 7;
    EXCHANGE = 8;
    EXCHANGE_BLOCK = 9;
    TRANSFER = 10;
}

message Transaction {
    optional int32 version = 1;
    optional TransType type = 2;
    optional uint64 nonce = 10;  //required since version 4
    extensions 100 to max;
}

message NameTrans {
    extend Transaction {
        optional NameTrans name_trans = 200;
    }

    optional string fantasy_name = 10;
    optional bytes public_key=20;
    optional NameProof proof = 30;
    optional bytes recovery_key=40;
    optional bool am_agent = 50;
    optional string my_agent = 60;
}

// Units 
// 
// Point            100 = Fantasypoint   =         100 Fantasybit 
// Coin               1 = Fantasybitcoin =           1 Fantasybit 
// Cent            0.01 = Fantasycent    =         100 Fantasybit 
// Yard           0.001 = Fantasyyard    =       1,000 Fantasybit 
// Hash        0.000001 = Fantasyhash    =   1,000,000 Fantasybit 
// Satoshi   0.00000001 = Fantasysatoshi = 100,000,000 Fantasybit 

message TransferTrans { 
    extend Transaction {
        optional TransferTrans transfer_tran = 400;
    }

    optional string from = 10;
    optional string to = 20;
    optional uint64 amount = 30;
}

message SignedTransaction {
    optional Transaction trans = 10;
    optional bytes id = 20;
    optional bytes sig = 30;
    optional string fantasy_name = 40;
}

message BlockHeader {
    enum Type { NORMAL=1; DATA=2; }

    optional int32 version = 1;
    optional int32 num = 10;
    optional bytes prev_id = 20;
    optional int32 timestamp = 21;
    optional bytes generator_pk=30;
    optional bytes generating_sig=40; //hash(prev(generating_sig) + generator_pk)
    optional uint64 basetarget=50;
    optional Type blocktype = 60;
    optional bytes transaction_id = 70;
}

message SignedBlockHeader {
    optional BlockHeader head = 10;
    optional string sig = 30;
}

message Block {
    optional SignedBlockHeader signedhead = 10;
    repeated SignedTransaction signed_transactions = 20;

    extensions 1000 to max;
}

////////////////////////////////////////////////////////////
// FantasyPlayerPoints used for projections and results   //
// does not contain team                                  //
// player + week is enough                                //
////////////////////////////////////////////////////////////
message FantasyPlayerPoints {
    optional uint32 season = 10;
    optional uint32 week = 20;
    optional string playerid = 30;
    optional int32 points = 40;
    optional float result = 50;
}

////////////////////////////////////////////////////////////
// ProjectionTrans used to make projections
////////////////////////////////////////////////////////////
message ProjectionTrans {
    extend Transaction {
        optional ProjectionTrans proj_trans = 201;
    }

    optional uint32 season = 10;
    optional uint32 week = 20;
    optional string playerid = 30;
    optional int32 points = 40;
}

message PlayerPoints {
    optional string playerid = 30;
    optional int32 points = 40;
}

message ProjectionTransBlock {
    extend Transaction {
        optional ProjectionTransBlock proj_trans_block = 211;
    }

    optional uint32 season = 10;
    optional uint32 week = 20;
    repeated PlayerPoints player_points = 30;
}

message Data {
    enum Type {
        SCHEDULE = 0;
        PLAYER = 1;
        GAME = 2;
        RESULT = 3;
        MESSAGE = 4;
    }

    optional int32 version = 10;
    optional Type type = 20;

    extensions 100 to max;
}

message PlayerData {
    extend Data {
        optional PlayerData player_data = 101;
    }

    optional string playerid = 10;
    optional PlayerBase player_base = 20;
    optional PlayerStatus player_status = 30;
    optional PlayerGameStatus player_game_status = 40;
}

message GameData {
    extend Data {
        optional GameData game_data = 111;
    }

    optional string gameid=10;
    optional GameStatus status=20;
}

message ResultData {
    extend Data {
        optional ResultData result_data = 202;
    }

    optional GameResult game_result = 10;
}

message ScheduleData {
    extend Data {
        optional ScheduleData schedule_data = 302;
    }

    optional int32 week = 1;
    optional WeeklySchedule weekly = 10;
}

enum TrType {
    SEASONSTART=2; // before week1 - week1 projection can start
    SEASONEND=3; //after last week of season
    HEARTBEAT=5; //anytime
    GAMESTART=6; //list of teamids to cut off projections for week
    WEEKOVER=7; //clear all projections
    TRADESESSIONSTART=8;
    TRADESESSIONCLOSEANDPREOPEN=9;
    PLAYOFFSTART=10; //LISTOFPLAYOFFTEAMS
    SUPERBOWLEND=12;
}

message DataTransition {
    extend Transaction {
        optional DataTransition data_trans = 203;
    }

    optional TrType type =1;
    optional uint32 season =10;
    optional uint32 week = 20;
    repeated GameData gamedata = 30;
    repeated Data data = 40;
}

message MessageData {
    extend Data {
        optional MessageData message_data = 404;
    }

    optional string msg = 10;
    optional int32 gt  = 20;
    optional int32 lt = 30;
}

message StampedTrans {
    extend Transaction {
        optional StampedTrans stamped_trans = 300;
    }

    optional uint64 timestamp = 10;
    optional int32 seqnum = 20;
    optional int32 prevseq  = 21;
    optional SignedTransaction signed_orig = 30;
}

message ExchangeOrder {
    extend Transaction {
        optional ExchangeOrder exchange_order = 310;
    }

    enum Type { NEW=1; CANCEL=2; REPLACE=3; }

    optional Type type = 10;
    optional string playerid = 40;
    optional OrderCore core = 50;
    optional int32 cancel_oref = 100;
    optional FutContract futcontract = 110;
    optional string symbol = 120;
    extensions 500 to max;
}

//message TimeTransition {
//    extend Transaction {
//        optional TimeTransition time_trans = 303;
//    }

//    enum Type {
//        TRADEOPEN=2; // trading session opened
//        TRADECLOSE=3; // trading session closed
//    }

//    optional Type type =1;
//    optional uint32 season =10;
//    optional uint32 week = 20;
//}
